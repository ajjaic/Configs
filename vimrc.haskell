" First install and run this -> git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" Run BundleUpdate
" goto ~/.vim/bundles/vimproc.vim
" Run make

" Necessary for lots of cool vim things
set nocompatible
filetype off
filetype plugin off
filetype plugin indent off

" Map leader
let mapleader = ","

" Vundle vim plugin manager
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" My Bundles
Bundle 'gmarik/vundle'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'godlygeek/tabular'
Bundle 'vim-scripts/bufkill.vim'
Bundle 'Raimondi/delimitMate'
Bundle 'Shougo/unite.vim'
Bundle 'Shougo/vimproc.vim'
Bundle 'Shougo/neomru.vim'
Bundle 'thinca/vim-unite-history'
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-surround'
Bundle 'bling/vim-airline'
Bundle 'scrooloose/syntastic'
Bundle 'eagletmt/ghcmod-vim'
Bundle 'eagletmt/neco-ghc'
Bundle 'Shougo/neocomplcache.vim'
Bundle 'travitch/hasksyn'

" Trim trailing spaces
function! TrimTrailingWhitespace()
    execute "normal mz"
    %s/\s\+$//ge
    execute "normal `z"
endfunction

if !exists("autocommands_loaded")
    let autocommands_loaded = 1
    "Automatically reload vimrc when it is saved
    autocmd BufWritePost .vimrc source ~/.vimrc
    "Remove any trailing whitespace in the file
    autocmd BufWrite * :call TrimTrailingWhitespace()
    "Jump to last position when opening file
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    " Do not show matching parenthesis
    autocmd VimEnter * NoMatchParen
endif

" General Settings
syntax enable
syntax on
filetype on
filetype plugin on
filetype plugin indent on

"allow backspacing over everything in insert mode
set backspace=indent,eol,start

"tell the term has 256 colors
set t_Co=256

"line numbers
set number

"block edit in visual mode
set virtualedit=block

set nowrap
"set wrap "wrap lines
"set linebreak "wrap lines at convenient points

"mark the ideal max text width
"set colorcolumn=+1

"indent settings
set shiftwidth=4 "No of spaces for autoindent
set softtabstop=4
"set tabstop=4
set expandtab " Expand tabs to spaces
set autoindent
set copyindent " Copy previous indentation on autoindenting
set shiftround " Use multiple of shiftwidth when indenting
set nojoinspaces "Dont convert spaces to tabs
set smarttab "Indent instead of tab at start of line
"set linespace=0 " Sets linespace (px between lines)

"Configure wild menu
set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*~,*.py[co],*.obj,*.bak
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

"dont continue comments when pushing o/O
set formatoptions-=o

"Enable mouse support in console
set mouse=a

"Autoread files changed outside vim
set autoread

set hidden "Allow buffers to exist in the background even if it is not in Window

set showcmd "Display command in lower right corner
set noshowmode

set laststatus=2 " Use 2 lines for status bar

"Searching
set ignorecase " Case insenstive while searching
set smartcase  " Case sensitive if search pattern contains uppercase characters
set hlsearch   " Highlight search words
set incsearch  " Incremental searching

"set clipboard=unnamedplus " Use the OS clipboard by default
set clipboard=unnamed

set nobackup " Do we need backups
set noswapfile
set nowb

"vertical/horizontal scroll off settings
set scrolloff=20 " Minimal number of lines to keep above and below cursor
set sidescrolloff=40 " Minimal number of lines to keep to the left and right of cursor
set sidescroll=1
"set scrolljump=5

"Lower delay of escaping out of other modes
set timeout timeoutlen=1000 ttimeoutlen=0

"Change color of line numbers
highlight LineNr ctermfg=blue ctermbg=black

" Horizontal scroll jump
nnoremap L 10zl
nnoremap H 10zh

" indent and keep selection so that i can do it again
vnoremap < <gv
vnoremap > >gv

" Remap jj to escape from insert mode.
inoremap jk <Esc>

" Edit vimrc file
nnoremap  <Leader>ev :e ~/.vimrc<CR>

" Clear highlighted text
nnoremap <leader>s :noh<CR>

" Buffer settings
nnoremap <C-l> :bn<CR>
nnoremap <C-h> :bp<CR>

" Page up and Page down
nnoremap <C-j> <C-d>
nnoremap <C-k> <C-u>

" Switch to previous edited buffer
nnoremap <C-b> :b#<CR>

" Navigating the lines
nnoremap J 3j
nnoremap K 3k
vnoremap J 3j
vnoremap K 3k

" Join lines
nnoremap ; J

" Visually show when I enter and leave `insert` mode
autocmd InsertEnter * set cul
autocmd InsertLeave * set nocul

" Toggle existing fold
nnoremap <Leader>a za
" Toggle existing folds recursively
nnoremap <Leader>A zA
" Open all folds
nnoremap <Leader>R zR
" Close all folds
nnoremap <Leader>M zM

" Search highlighted text
vnoremap / yq/p<CR>:GhcModType<CR>
"""""""""""""
"  PLUGINS  "
"""""""""""""

" Bufkill mappings. Allows to keeps windows open even when a buffer is deleted
cnoremap bd BD

" EasyMotion
let g:EasyMotion_do_mapping = 0
map f <Plug>(easymotion-s)
map ew <Plug>(easymotion-bd-w)
map er <Plug>(easymotion-bd-jk)

" Unite
let g:unite_prompt = '>>'
let g:unite_source_grep_default_opts   = "-iInH"
let g:unite_source_grep_recursive_opt  = "-r"
let g:unite_source_grep_max_candidates = 200
let g:unite_source_history_yank_enable = 1
let g:unite_source_buffer_time_format  = ""
nnoremap <silent> <Leader>ut :Unite -start-insert file_rec/async<CR><CR>
nnoremap <silent> <Leader>uv :Unite -start-insert buffer<CR>
nnoremap <silent> <leader>ul :Unite -start-insert line<CR><CR>
nnoremap <silent> <leader>uc :Unite -start-insert history/command<CR>
nnoremap <silent> <leader>uy :Unite history/yank<CR>
nnoremap <silent> <Leader>um :Unite -start-insert file_mru<CR>
nnoremap <silent> <leader>uf :Unite history/search<CR>
nnoremap <silent> <leader>ug :Unite grep:$buffers<CR>
nnoremap <silent> <leader>up :Unite grep:./*<CR>
nnoremap <silent> <leader>ud :UniteWithBufferDir -start-insert file<CR>
nnoremap <silent> <leader>uj :Unite -start-insert jump<CR>
"nnoremap <silent> <leader>uf :UniteWithCursorWord file_rec/async<CR>
"nnoremap <silent> <leader>ug :UniteWithCursorWord grep<CR>
"nnoremap <silent> <leader>ul :Unite -input=\zs:: line<CR>

" Tabularize
cnoremap <leader>ta Tabularize

" Vim Airline
let g:airline#extensions#tabline#enabled  = 1
let g:airline#extensions#tabline#fnamemod = ':t'

"Vim Bufferline
"let g:bufferline_fname_mod = ':t'
"let g:bufferline_echo = 0

"Vim Syntastic
let g:syntastic_check_on_wq = 0
let g:syntastic_id_checkers = 1
let g:syntastic_echo_current_error = 1
let g:syntastic_enable_signs = 1
let g:syntastic_enable_highlighting = 1
nnoremap <silent> <leader>se :Errors<CR>
nnoremap <silent> <leader>sc :lclose<CR>
nnoremap <silent> <leader>si :SyntasticInfo<CR>

"Vim GHC Mod
nnoremap <silent> <leader>gti :GhcModTypeInsert<CR>
nnoremap <silent> <leader>gt :GhcModType!<CR>
nnoremap <silent> <leader>gi :GhcModInfo<CR>
nnoremap <silent> <leader>gp :GhcModInfoPreview<CR>
nnoremap <silent> <leader>gc :GhcModTypeClear<CR>

"Vim NerdCommenter
let g:NERDCreateDefaultMappings = 0
map <leader>cc <plug>NERDCommenterToggle
map <leader>ca <plug>NERDComAltDelim
"map <leader>cc <plug>NERDCommenterAlignBoth
"map <leader>cu <plug>NERDCommenterUncomment
"map <leader>cc <leader>cb

"Haskell Completion
let g:necoghc_enable_detailed_browse = 1

"Neocomplcache
let g:neocomplcache_enable_at_startup = 1
